/*************************************************************************
  * Names: Peter Grabowski and Rafael Grinberg
  * NetIDs: pgrabows@ and rgrinber@
  * Precepts: P02B and P02
  * 
  * Compilation:  javac RandomizedQueue.java
  * Execution:    java RandomizedQueue
  * Dependencies: none
  *
  * A ?
  *
  *************************************************************************/
import java.util.Iterator;
import java.util.NoSuchElementException;

public class RandomizedQueue<Item> implements Iterable<Item> {
    private Item[] q;            // queue elements
    private int N;           // number of elements on queue

    // cast needed since no generic array creation in Java
    public RandomizedQueue() {
        q = (Item[]) new Object[2];
        N = 0;
    }

    public boolean isEmpty() {
        return N == 0;
    }
    
    public int size() {
        return N;
    }

    // resize the underlying array
    private void resize(int max) {
        assert(max >= N);
        Item[] copy = (Item[]) new Object[max];
        for (int i = 0; i < N; i++)
            copy[i] = q[i];
        q = copy;
    }


    public void enqueue(Item item) {
        // double size of array if necessary and recopy to front of array
        if (N == q.length) resize(2*q.length);   // double size of array if necessary
        q[N] = item;                        // add item
        N++;
    }

    // delete and return a random item
    public Item dequeue() {
        int i = StdRandom.uniform(N);
        Item temp = q[i];
        q[i] = q[N-1];
        q[N-1] = null;
        N--;
        if (N > 0 && N == q.length/4) resize(q.length/2); 
        return temp;
    }
    
    // return (but do not delete) a ranom item
    public Item sample() {
        int i = StdRandom.uniform(N);
        return q[i];
    }

    public Iterator<Item> iterator() { return new QueueIterator(); }

    // an iterator, doesn't implement remove() since it's optional
    private class QueueIterator implements Iterator<Item> {
        private int i = 0;
        public boolean hasNext()  { return i < N;                               }
        public void remove()      { throw new UnsupportedOperationException();  }

        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Item item = q[i];
            i++;
            if (i == q.length) i = 0;     // wrap-around
            return item;
        }
    }



    // a test client
    public static void main(String[] args) {
        RandomizedQueue<String> queue = new RandomizedQueue<String>();
        queue.enqueue("This");
        queue.enqueue("is");
        queue.enqueue("a");
        queue.enqueue("test.");

        for (String s : queue)
            System.out.println(s);

        System.out.println();

        while (!queue.isEmpty())  {
            System.out.println(queue.dequeue());
        }
    }


}
